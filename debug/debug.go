package main

import (
	"bytes"
	"crypto/sha256"
	"fmt"
	"gossh"
	"os"
)

// 固定
var clientWinVersion = "5353482d322e302d476f"
var serverVersion = "5353482d322e302d4f70656e5353485f372e340d0a"
var clientPrivateKey = "0000000000000000000000000000000000000000000000000000000000000000"
var clientECDHEPubKey = "2fe57da347cd62431528daac5fbb290730fff684afc4cfc2ed90995f58cb3b74"

// debug用
var clientInit = "000003bc101400000000000000000000000000000000000000ac637572766532353531392d7368613235362c637572766532353531392d736861323536406c69627373682e6f72672c656364682d736861322d6e697374703235362c656364682d736861322d6e697374703338342c656364682d736861322d6e697374703532312c6469666669652d68656c6c6d616e2d67726f757031342d7368613235362c6469666669652d68656c6c6d616e2d67726f757031342d736861312c6578742d696e666f2d630000018b7273612d736861322d3531322d636572742d763031406f70656e7373682e636f6d2c7273612d736861322d3235362d636572742d763031406f70656e7373682e636f6d2c7373682d7273612d636572742d763031406f70656e7373682e636f6d2c7373682d6473732d636572742d763031406f70656e7373682e636f6d2c65636473612d736861322d6e697374703235362d636572742d763031406f70656e7373682e636f6d2c65636473612d736861322d6e697374703338342d636572742d763031406f70656e7373682e636f6d2c65636473612d736861322d6e697374703532312d636572742d763031406f70656e7373682e636f6d2c7373682d656432353531392d636572742d763031406f70656e7373682e636f6d2c65636473612d736861322d6e697374703235362c65636473612d736861322d6e697374703338342c65636473612d736861322d6e697374703532312c7273612d736861322d3531322c7273612d736861322d3235362c7373682d7273612c7373682d6473732c7373682d65643235353139000000556165733132382d67636d406f70656e7373682e636f6d2c63686163686132302d706f6c7931333035406f70656e7373682e636f6d2c6165733132382d6374722c6165733139322d6374722c6165733235362d637472000000556165733132382d67636d406f70656e7373682e636f6d2c63686163686132302d706f6c7931333035406f70656e7373682e636f6d2c6165733132382d6374722c6165733139322d6374722c6165733235362d63747200000042686d61632d736861322d3235362d65746d406f70656e7373682e636f6d2c686d61632d736861322d3235362c686d61632d736861312c686d61632d736861312d393600000042686d61632d736861322d3235362d65746d406f70656e7373682e636f6d2c686d61632d736861322d3235362c686d61632d736861312c686d61632d736861312d3936000000046e6f6e65000000046e6f6e650000000000000000000000000000000000000000000000000000000000"
var serverinit = "000004fc0a1414df3db6f649b00bd7ee4fc6473f6b9800000140637572766532353531392d7368613235362c637572766532353531392d736861323536406c69627373682e6f72672c656364682d736861322d6e697374703235362c656364682d736861322d6e697374703338342c656364682d736861322d6e697374703532312c6469666669652d68656c6c6d616e2d67726f75702d65786368616e67652d7368613235362c6469666669652d68656c6c6d616e2d67726f757031362d7368613531322c6469666669652d68656c6c6d616e2d67726f757031382d7368613531322c6469666669652d68656c6c6d616e2d67726f75702d65786368616e67652d736861312c6469666669652d68656c6c6d616e2d67726f757031342d7368613235362c6469666669652d68656c6c6d616e2d67726f757031342d736861312c6469666669652d68656c6c6d616e2d67726f7570312d73686131000000417373682d7273612c7273612d736861322d3531322c7273612d736861322d3235362c65636473612d736861322d6e697374703235362c7373682d65643235353139000000af63686163686132302d706f6c7931333035406f70656e7373682e636f6d2c6165733132382d6374722c6165733139322d6374722c6165733235362d6374722c6165733132382d67636d406f70656e7373682e636f6d2c6165733235362d67636d406f70656e7373682e636f6d2c6165733132382d6362632c6165733139322d6362632c6165733235362d6362632c626c6f77666973682d6362632c636173743132382d6362632c336465732d636263000000af63686163686132302d706f6c7931333035406f70656e7373682e636f6d2c6165733132382d6374722c6165733139322d6374722c6165733235362d6374722c6165733132382d67636d406f70656e7373682e636f6d2c6165733235362d67636d406f70656e7373682e636f6d2c6165733132382d6362632c6165733139322d6362632c6165733235362d6362632c626c6f77666973682d6362632c636173743132382d6362632c336465732d636263000000d5756d61632d36342d65746d406f70656e7373682e636f6d2c756d61632d3132382d65746d406f70656e7373682e636f6d2c686d61632d736861322d3235362d65746d406f70656e7373682e636f6d2c686d61632d736861322d3531322d65746d406f70656e7373682e636f6d2c686d61632d736861312d65746d406f70656e7373682e636f6d2c756d61632d3634406f70656e7373682e636f6d2c756d61632d313238406f70656e7373682e636f6d2c686d61632d736861322d3235362c686d61632d736861322d3531322c686d61632d73686131000000d5756d61632d36342d65746d406f70656e7373682e636f6d2c756d61632d3132382d65746d406f70656e7373682e636f6d2c686d61632d736861322d3235362d65746d406f70656e7373682e636f6d2c686d61632d736861322d3531322d65746d406f70656e7373682e636f6d2c686d61632d736861312d65746d406f70656e7373682e636f6d2c756d61632d3634406f70656e7373682e636f6d2c756d61632d313238406f70656e7373682e636f6d2c686d61632d736861322d3235362c686d61632d736861322d3531322c686d61632d73686131000000156e6f6e652c7a6c6962406f70656e7373682e636f6d000000156e6f6e652c7a6c6962406f70656e7373682e636f6d0000000000000000000000000000000000000000000000"
var ecdheServerReply = "000001040b1f000000680000001365636473612d736861322d6e69737470323536000000086e697374703235360000004104a2391d3b44926a793b1f1db91d6d2b16e8e078087756545a9a044c849a6c1d8ecd33c5a8b9af38ef9ec931973c743e5328641e0a558877c58909a53340a6abc800000020ed378924f995aa1a3ef0071183f5e050ee52f1bf6146b338586754d27364202a000000630000001365636473612d736861322d6e6973747032353600000048000000204a967b8841baadb4d626c069fdf825be944781560734be4afb3dd32c9c8518a60000002069a5e08ab5bcf1ab6f2748db87114fc2b1653cf456991f3174cd46e8e20f18470000000000000000000000"
var serverECDHPubKey []byte

func main() {

	var packet []byte
	binaryPacket := gossh.ParseSSHPacket(gossh.StrtoByte(serverVersion))

	// Client Version
	packet = append(packet, gossh.IntTo4byte(len(gossh.StrtoByte(clientWinVersion)))...)
	packet = append(packet, gossh.StrtoByte(clientWinVersion)...)
	// Server Version
	packet = append(packet, gossh.IntTo4byte(len(binaryPacket[0].Payload))...)
	packet = append(packet, binaryPacket[0].Payload...)
	// Client MSG Init
	binaryPacket = gossh.ParseSSHPacket(gossh.StrtoByte(clientInit))
	fmt.Printf("Client msg init length is %d\n", len(gossh.StrtoByte(clientInit)))
	packetlen := len(gossh.StrtoByte(clientInit)) - 16 - 1 - 4
	packet = append(packet, gossh.IntTo4byte(packetlen)...)
	packet = append(packet, binaryPacket[0].Payload...)
	// Server MSG Init
	binaryPacket = gossh.ParseSSHPacket(gossh.StrtoByte(serverinit))
	packetlen = len(gossh.StrtoByte(serverinit)) - int(binaryPacket[0].PaddingLength[0]) - 1 - 4
	packet = append(packet, gossh.IntTo4byte(packetlen)...)
	packet = append(packet, binaryPacket[0].Payload...)
	// ECHDE Reply
	binaryPacket = gossh.ParseSSHPacket(gossh.StrtoByte(ecdheServerReply))
	_, i := gossh.ParseBinaryPacketPayload(binaryPacket[0].Payload)
	ecdhe := i.(gossh.ECDHEKeyExchaneReply)
	// Kex Host Key
	packetlen = len(gossh.ToByteArr(ecdhe.KEXHostKey)) - 4
	packet = append(packet, gossh.IntTo4byte(packetlen)...)
	packet = append(packet, gossh.ToByteArr(ecdhe.KEXHostKey)[4:]...)
	// Client ECDHE Public Key
	packet = append(packet, gossh.IntTo4byte(32)...)
	packet = append(packet, gossh.StrtoByte(clientECDHEPubKey)...)
	// Server ECDHE Public Key
	packet = append(packet, gossh.IntTo4byte(32)...)
	packet = append(packet, i.(gossh.ECDHEKeyExchaneReply).ECDHEServerEphemeralPublicKey...)
	serverECDHPubKey = i.(gossh.ECDHEKeyExchaneReply).ECDHEServerEphemeralPublicKey

	fmt.Printf("server public ecdhe key is %x\n", serverECDHPubKey)

	var p [32]byte
	copy(p[:], gossh.StrtoByte(clientPrivateKey))

	secret := gossh.CreateSecret(gossh.CopyTo32Byte(gossh.StrtoByte(clientPrivateKey)),
		gossh.CopyTo32Byte(serverECDHPubKey))
	packet = append(packet, gossh.IntTo4byte(len(secret))...)
	//packet = append(packet, []byte{0x00}...)
	packet = append(packet, secret[:]...)

	var K []byte
	K = append(K, gossh.IntTo4byte(len(secret))...)
	//K = append(K, []byte{0x00}...)
	K = append(K, secret[:]...)

	h := sha256.New()
	b := bytes.Buffer{}
	b.Write(packet)
	//b.Write(gossh.StrtoByte(inputh))

	fmt.Printf("input H is %x\n", b.Bytes())

	h.Write(b.Bytes())

	H := h.Sum(nil)
	fmt.Printf("sum is %x\n", H)
	fmt.Printf("K is %x\n", K)

	enckey := gossh.CreateEncryptionSSHKeys(K, H)

	//fmt.Printf("EncryptionKeyClientToServer %x\n", enckey.EncryptionKeyClientToServer)
	//fmt.Printf("EncryptionKeyServerToClient %x\n", enckey.EncryptionKeyServerToClient)

	aead := gossh.NewAEAD(enckey.EncryptionKeyClientToServer)

	encpaket := gossh.EncryptPacket(aead,
		gossh.StrtoByte("0e050000000c7373682d75736572617574680000000000000000000000000000"),
		enckey.InitialIvClientToServer)

	fmt.Printf("enc packet is %x\n", encpaket)

	plain := gossh.DecryptPacket(gossh.NewAEAD(enckey.EncryptionKeyServerToClient),
		gossh.StrtoByte("e120a35130e1588802efd2a6fb91e9800ec95429b90df024123f55716221e70286da33b0af9ac83281a0731748bc9a28"),
		gossh.IncrementIV(enckey.InitialIvServerToClient),
		gossh.StrtoByte("00000020"))
	fmt.Printf("plain is %x\n", plain)

	userauth := gossh.NewUserAuthenticationRequest([]byte(`root`), []byte(os.Getenv("password")))
	userauth = gossh.AddPaddingPaket(userauth)
	fmt.Printf("user auth is %x\n", userauth)

	encpaket = gossh.EncryptPacket(aead,
		userauth,
		gossh.StrtoByte("f67194cbb4355d3e50ce1dbe"))
	fmt.Printf("enc packet is %x\n", encpaket)

}
